@page "/fetchdata"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using S2kDesignTemplate.Shared
@using Grpc.Net.Client
@using System.Net
@inject HttpClient Http
@attribute [Authorize]
@inject GrpcChannel Channel

<h1>GRPC and Rest Authenticated Calls</h1>

<p>This component demonstrates fetching data from <a target="_blank" href="https://localhost:44361/swagger/index.html">ClientAPI HTTP Aggregator</a> using REST and GRPC  (restricted with CORS policy to allow https://localhost:44314/ ) .

    </p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h3>GRPC API Call</h3>
    <div>
        Read User Profile from GRPC Service
        <br />
        Display Name: @profile.Displayname
    </div>
    <br />
    <h3>Rest API Call</h3>
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[] forecasts;
    private GrpcClientApi.ProfileResponse profile;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("api/WeatherForecast");
            var client = new GrpcClientApi.ClientApi.ClientApiClient(Channel);

            profile = await client.GetProfileByIdAsync(new GrpcClientApi.ProfileRequest { Id = "2"});
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

}
